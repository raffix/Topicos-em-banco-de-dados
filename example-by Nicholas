'''
    Tópicos em ML
    Acadêmico: Nicholas S. Brutti
    Para gerar os gráficos:
    $ sudo pip3 install matplotlib cairocffi -y
'''

import numpy as np
import matplotlib.pyplot as plt

custos = []
iteracoes = 10000

# Função de custo
def J(X, Y, theta):
    m = X.shape[0]
    dif = (X.dot(theta.T) - Y) ** 2
    s = np.sum(dif)
    cost = s/(2*m)
    return cost

# Gradiente descendente
def gradienteDesc(X, Y, alfa, y_hat, theta):
    m = X.shape[0]
    y_hat = X.dot(theta.T)
    error = y_hat - Y
    dvt = (error.T.dot(X))/m
    theta = theta - (alfa * dvt)
    return theta

arquivo = open("Example1.txt", "r")
linhas = arquivo.readlines()
alfa = 0.01

X = [float(l.split(',')[0]) for l in linhas]
Y = [float(l.split(',')[1]) for l in linhas]

# [] Significa a dimensão
X = np.array([X]).T
Y = np.array([Y]).T

# Inserir a coluna de 1's
X = np.insert(X, 0, values=1, axis=1)

# Criação do theta
theta = np.array([[0.2, 0.2]])

y_hat = X.dot(theta.T)

for i in range(1, iteracoes):
    theta = gradienteDesc(X, Y, alfa, y_hat, theta)
    custos.append(J(X, Y, theta))
print(theta)

plt.xlabel("Iterações")
plt.ylabel("Custo")
plt.plot(custos, 'r--')
plt.legend(['Função custo'])
plt.show()

'''
    OBS:
    Dividir o conjunto de dados entre treinamento e aprendizado.
    m = X.shape[0] - Pega tamanho do conjunto de dados
    tsize = int(m * 0.7) - Tamanho do conjunto de testes (≃ 70%)
    X_train = X[:tsize] - TREINAMENTO
    X_test  = X[tsize:] - TESTE

    Fazer o mesmo para o Y
    Y_train = Y[:tsize]
    Y_test  = Y[tsize:]
'''
